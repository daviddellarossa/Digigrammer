using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEditor;
using UnityEngine;

namespace Assets.Scripts.MessageBroker
{
    public class MyAssetPostProcessor : AssetPostprocessor
    {
        public static void OnPostprocessAllAsset(string[] importedAssets, string[] deletedAssets,
            string[] movedAssets, string[] movedFromAssetPaths)
        {
            //var gen = new MessageBrokerTypeGenerator();
            //gen.Generate();
        }
    }

    internal static class Indent
    {
        private static int count = 0;
        private static readonly char indChar = '\t';

        public static string Get() => new string(indChar, count);
        public static string Push() { count++; return Get(); }
        public static string Pop() { count--; count = Math.Max(0, count); return Get(); }
    }

    public static class MessageBrokerGenerator
    {
        public static readonly string ClassName = "MessageBroker";
        public static readonly string Namespace = "Assets.Scripts.MessageBroker";
        public static readonly string OutputFolder = $"Assets/Scripts/MessageBroker";
        public static readonly string NL = "\r\n";

        //[MenuItem("Game/MessageBroker/Generate Message Broker Base")]
        //static void GenerateMessageBaseBroker()
        //{
        //    var mbg = new MessageBrokerGenerator.MessageBrokerCommonGenerator();
        //    mbg.Generate();
        //}

        [MenuItem("Game/MessageBroker/Generate Message Broker")]
        static void GenerateMessageTypeBroker()
        {
            var mbg = new MessageBrokerGenerator.MessageBrokerCategoryGenerator();
            mbg.Generate();

            // TODO: Start compilation of scripts.
        }

        private static MessageInfo[] GetAllMessages()
        {
            string[] guids = AssetDatabase.FindAssets("t:" + typeof(Message).Name);
            var messageInfos = new MessageInfo[guids.Length];
            for (int i = 0; i < guids.Length; i++)         //probably could get optimized 
            {
                string path = AssetDatabase.GUIDToAssetPath(guids[i]);
                messageInfos[i] = new MessageInfo()
                {
                    Message = AssetDatabase.LoadAssetAtPath<Message>(path),
                    Path = path
                };
            }
            return messageInfos;
        }

        private static string CleanName(string name)
        {
            return System.Text.RegularExpressions.Regex.Replace(name, @"[^a-zA-Z0-9_]", String.Empty);
        }

        private class MessageInfo
        {
            public Message Message;
            public string Path;
        }

        internal class MessageBrokerCategoryGenerator
        {
            public void Generate()
            {
                MessageInfo[] messageInfos = GetAllMessages();

                var groups = messageInfos.GroupBy(x => x.Message.Category);
                
                foreach(var group in groups)
                {
                    GenerateFilePerCategory(group);
                }
            }
            private void GenerateFilePerCategory(IGrouping<string, MessageInfo> group)
            {
                var messageInfos = group.ToArray();

                var categoryName = CleanName(String.IsNullOrWhiteSpace(group.Key) ? "Unnamed" : group.Key);
                var className = $"MB{categoryName}";

                var sb = new StringBuilder();
                this.AddHeader(sb);

                this.AddUsings(sb);
                this.OpenNamespace(sb);

                this.OpenCommonClassDeclaration(sb);

                this.AddCommonVariables(messageInfos, className, categoryName, sb);

                this.CloseCommonClassDeclaration(sb);

                this.OpenClassDeclaration(sb, className);

                this.AddPrivateVariables(messageInfos, sb);

                this.AddConstructorBlock(messageInfos, className, sb);

                foreach (var message in messageInfos)
                {
                    this.AddSendMessageBlock(message, sb);
                }

                this.CloseClassDeclaration(sb);
                this.CloseNamespace(sb);


                CreateFile(sb, className);
            }

            private void CreateFile(StringBuilder sb, string category)
            {
                var outputPath = System.IO.Path.Combine(OutputFolder, $"{ClassName}.{category}.cs");

                System.IO.File.WriteAllText(outputPath, sb.ToString());
            }

            private void AddHeader(StringBuilder sb)
            {
                sb.AppendLine($"// Code auto-generated by {nameof(MessageBrokerGenerator)}");
                sb.AppendLine($"// Re-run the generator every time a new {nameof(Message)} is added or removed.");
                sb.AppendLine();
            }

            private void AddUsings(StringBuilder sb)
            {
                sb.AppendLine($"using UnityEngine;");
                sb.AppendLine($"using UnityEditor;");
                sb.AppendLine();
            }

            private void OpenNamespace(StringBuilder sb)
            {
                sb.AppendLine($"namespace {Namespace}");
                sb.AppendLine($"{{");
            }

            private void CloseNamespace(StringBuilder sb)
            {
                sb.AppendLine($"{Indent.Pop()}}}");
            }

            private void OpenCommonClassDeclaration(StringBuilder sb)
            {
                sb.AppendLine($"{Indent.Push()}public static partial class {ClassName}");
                sb.AppendLine($"{Indent.Get()}{{");
            }

            private void OpenClassDeclaration(StringBuilder sb, string className)
            {
                sb.AppendLine($"{Indent.Get()}public class {className}");
                sb.AppendLine($"{Indent.Get()}{{");
            }

            private void AddCommonVariables(MessageInfo[] messageInfos, string className, string variableName, StringBuilder sb)
            {
                Indent.Push();
                foreach (var messageInfo in messageInfos)
                {
                    sb.AppendLine($"{Indent.Get()}public static {className} {variableName} = new {className}();");
                }
                Indent.Pop();
            }


            private void AddPrivateVariables(MessageInfo[] messageInfos, StringBuilder sb)
            {
                Indent.Push();
                foreach (var messageInfo in messageInfos)
                {
                    sb.AppendLine($"{Indent.Get()}private {nameof(Message)} m_{CleanName(messageInfo.Message.name)};");
                }
                Indent.Pop();
            }

            private void AddConstructorBlock(MessageInfo[] messageInfos, string className, StringBuilder sb)
            {
                sb.AppendLine($"{Indent.Push()}public {className}()");
                sb.AppendLine($"{Indent.Get()}{{");
                Indent.Push();
                foreach (var messageInfo in messageInfos)
                {
                    sb.AppendLine($"{Indent.Get()}this.m_{CleanName(messageInfo.Message.name)} = AssetDatabase.LoadAssetAtPath<{nameof(Message)}>(\"{messageInfo.Path}\");");
                }
                Indent.Pop();
                sb.AppendLine($"{Indent.Get()}}}");
                Indent.Pop();
            }


            private void AddSendMessageBlock(MessageInfo messageInfo, StringBuilder sb)
            {
                var name = CleanName(messageInfo.Message.name);
                sb.AppendLine($"{Indent.Push()}public object Send_{name}({nameof(MessagePayload)} payload)");
                sb.AppendLine($"{Indent.Get()}{{");
                Indent.Push();

                sb.AppendLine($"{Indent.Get()}if (payload == null)");
                sb.AppendLine($"{Indent.Get()}{{");
                sb.AppendLine($"{Indent.Push()}Debug.LogWarning(\"Payload is null.\");");
                sb.AppendLine($"{Indent.Get()}return null;");
                sb.AppendLine($"{Indent.Pop()}}}");


                sb.AppendLine($"{Indent.Get()}m_{name}.{nameof(Message.SendMessage)}(payload);");
                sb.AppendLine();
                sb.AppendLine($"{Indent.Get()}return payload.{nameof(MessagePayload.payload)};");
                sb.AppendLine($"{Indent.Pop()}}}");
                Indent.Pop();
            }

            private void CloseClassDeclaration(StringBuilder sb)
            {
                sb.AppendLine($"{Indent.Get()}}}");
            }

            private void CloseCommonClassDeclaration(StringBuilder sb)
            {
                sb.AppendLine($"{Indent.Get()}}}");
            }
        }

        internal class MessageBrokerCommonGenerator
        {
            public void Generate()
            {
                MessageInfo[] messageInfos = GetAllMessages();

                var sb = new StringBuilder();
                this.AddHeader(sb);

                this.OpenNamespace(sb);

                this.OpenClassDeclaration(sb);

                this.CloseClassDeclaration(sb);

                this.CloseNamespace(sb);

                CreateFile(sb);
            }

            private void AddHeader(StringBuilder sb)
            {
                sb.AppendLine($"// Code auto-generated by {nameof(MessageBrokerGenerator)}");
                sb.AppendLine();
            }

            private void AddUsings(StringBuilder sb)
            {
                sb.AppendLine($"using UnityEngine;");
                sb.AppendLine($"using UnityEditor;");
                sb.AppendLine();
            }

            private void OpenNamespace(StringBuilder sb)
            {
                sb.AppendLine($"namespace {Namespace}");
                sb.AppendLine($"{{");
            }

            private void CloseNamespace(StringBuilder sb)
            {
                sb.AppendLine($"{Indent.Pop()}}}");
            }

            private void OpenClassDeclaration(StringBuilder sb)
            {
                sb.AppendLine($"{Indent.Push()}public static partial class {ClassName}");
                sb.AppendLine($"{Indent.Get()}{{");
            }

            private void AddPrivateVariables(MessageInfo[] messageInfos, StringBuilder sb)
            {
                Indent.Push();
                foreach (var messageInfo in messageInfos)
                {
                    sb.AppendLine($"{Indent.Get()}private {nameof(Message)} m_{CleanName(messageInfo.Message.name)};");
                }
                Indent.Pop();
            }

            private void AddStartBlock(MessageInfo[] messageInfos, StringBuilder sb)
            {
                sb.AppendLine($"{Indent.Push()}void Start()");
                sb.AppendLine($"{Indent.Get()}{{");
                Indent.Push();
                foreach (var messageInfo in messageInfos)
                {
                    sb.AppendLine($"{Indent.Get()}this.m_{CleanName(messageInfo.Message.name)} = AssetDatabase.LoadAssetAtPath<{nameof(Message)}>(\"{messageInfo.Path}\");");
                }
                Indent.Pop();
                sb.AppendLine($"{Indent.Get()}}}");
                Indent.Pop();
            }

            private void CloseClassDeclaration(StringBuilder sb)
            {
                sb.AppendLine($"{Indent.Get()}}}");
            }

            private void CreateFile(StringBuilder sb)
            {
                var outputPath = System.IO.Path.Combine(OutputFolder, $"{ClassName}.cs");

                System.IO.File.WriteAllText(outputPath, sb.ToString());
            }
        }
    }
}
